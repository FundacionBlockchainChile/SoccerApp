./app/src/androidTest/java/com/example/soccerapp/ExampleInstrumentedTest.kt

package com.example.soccerapp

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.example.soccerapp", appContext.packageName)
    }
}

./app/src/test/java/com/example/soccerapp/ExampleUnitTest.kt

package com.example.soccerapp

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}

./app/src/main/java/com/example/soccerapp/MyApplication.kt

package com.example.soccerapp

import android.app.Application
import dagger.hilt.android.HiltAndroidApp

@HiltAndroidApp
class MyApp : Application() {
}

./app/src/main/java/com/example/soccerapp/MainActivity.kt

package com.example.soccerapp

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import com.example.soccerapp.ui.navigation.NavGraph
import com.example.soccerapp.ui.theme.SoccerAppTheme
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            SoccerAppTheme {
                // Usamos el Scaffold para proporcionar una consistencia visual y estructural en toda la app
                Scaffold { innerPadding ->
                    AppContent(modifier = Modifier.padding(innerPadding))
                }
            }
        }
    }
}

@Composable
fun AppContent(modifier: Modifier = Modifier) {
    // Incorporamos el NavGraph aquí para manejar la navegación entre pantallas
    NavGraph()
}


./app/src/main/java/com/example/soccerapp/viewmodel/TeamViewModel.kt

package com.example.soccerapp.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.soccerapp.model.Team
import com.example.soccerapp.model.TeamDetails
import com.example.soccerapp.repository.TeamRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class TeamViewModel @Inject constructor(
    private val repository: TeamRepository
) : ViewModel() {
    private val _teams = MutableStateFlow<List<Team>>(emptyList())
    val teams: StateFlow<List<Team>> = _teams.asStateFlow()

    init {
        loadTeams()
    }

    private fun loadTeams() {
        viewModelScope.launch {
            repository.getTeams().collect { teamsList ->
                _teams.value = teamsList
            }
        }
    }

    private val _teamDetails = MutableStateFlow<TeamDetails?>(null)
    val teamDetails = _teamDetails.asStateFlow()

    fun loadTeamDetails(teamId: Int) {
        viewModelScope.launch {
            val details = repository.getTeamDetails(teamId)
            details.collect {
                _teamDetails.value = it
            }
        }
    }
}


./app/src/main/java/com/example/soccerapp/ui/navigation/NavGraph.kt

package com.example.soccerapp.ui.navigation

import androidx.compose.runtime.Composable
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.soccerapp.ui.view.TeamDetailScreen
import com.example.soccerapp.ui.view.TeamListScreen
import com.example.soccerapp.viewmodel.TeamViewModel

@Composable
fun NavGraph(startDestination: String = "teamList") {
    val navController = rememberNavController()

    NavHost(navController = navController, startDestination = startDestination) {
        composable("teamList") {
            val viewModel: TeamViewModel = hiltViewModel()
            TeamListScreen(viewModel = viewModel, navController = navController)
        }
        composable("teamDetail/{teamId}") { backStackEntry ->
            val teamId = backStackEntry.arguments?.getString("teamId")?.toInt() ?: 0
            val viewModel: TeamViewModel = hiltViewModel()
            TeamDetailScreen(teamId = teamId, viewModel = viewModel, navController = navController)
        }
    }
}


./app/src/main/java/com/example/soccerapp/ui/theme/Color.kt

package com.example.soccerapp.ui.theme

import androidx.compose.ui.graphics.Color

val DarkPrimary = Color(0xFF9E9E9E)
val LightPrimary = Color(0xFFFFF9C4)
val Primary = Color(0xFFFFEB3B)
val TextIcon = Color(0xFF212121)
val AccentColor = Color(0xFFC5CAE9)
val PrimaryText = Color(0xFF757575)
val SecondaryText = Color(0xFFBDBDBD)
val DividerColor = Color(0xFFBDBDBD)

./app/src/main/java/com/example/soccerapp/ui/theme/Theme.kt

package com.example.soccerapp.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.platform.LocalContext

@Composable
fun SoccerAppTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    content: @Composable () -> Unit
) {
    val colors = if (darkTheme) {
        darkColorScheme(
            primary = Primary,
            secondary = AccentColor,
            onPrimary = TextIcon,
            background = LightPrimary,
            surface = LightPrimary,
            onSecondary = SecondaryText,
            onBackground = PrimaryText,
            onSurface = SecondaryText,
        )
    } else {
        lightColorScheme(
            primary = Primary,
            secondary = AccentColor,
            onPrimary = TextIcon,
            background = LightPrimary,
            surface = LightPrimary,
            onSecondary = SecondaryText,
            onBackground = PrimaryText,
            onSurface = SecondaryText,
        )
    }

    MaterialTheme(
        colorScheme = colors,
        typography = Typography,
        content = content
    )
}


./app/src/main/java/com/example/soccerapp/ui/theme/Type.kt

package com.example.soccerapp.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

// Set of Material typography styles to start with
val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
    /* Other default text styles to override
    titleLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp,
        lineHeight = 28.sp,
        letterSpacing = 0.sp
    ),
    labelSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
    */
)

./app/src/main/java/com/example/soccerapp/ui/view/TeamDetailScreen.kt

package com.example.soccerapp.ui.view

import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.ui.Modifier
import androidx.navigation.NavController
import com.example.soccerapp.viewmodel.TeamViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun TeamDetailScreen(teamId: Int, viewModel: TeamViewModel, navController: NavController) {
    LaunchedEffect(teamId) {
        viewModel.loadTeamDetails(teamId)
    }

    val teamDetails = viewModel.teamDetails.collectAsState(initial = null).value

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text(teamDetails?.name ?: "Loading...") },
                navigationIcon = {
                    IconButton(onClick = { navController.navigateUp() }) {
                        Icon(Icons.Filled.ArrowBack, contentDescription = "Go back")
                    }
                }
            )
        }
    ) { padding ->
        Column(modifier = Modifier.padding(padding).fillMaxSize()) {
            if (teamDetails != null) {
                Text(text = "Stadium: ${teamDetails.stadium}")
                Text(text = "City: ${teamDetails.city}")
                Text(text = "Coach: ${teamDetails.coach}")
                // More details can be added here
            } else {
                Text(text = "Details are loading or unavailable")
            }
        }
    }
}


./app/src/main/java/com/example/soccerapp/ui/view/TeamListScreen.kt

package com.example.soccerapp.ui.view

import android.util.Log
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import coil.compose.rememberImagePainter
import com.example.soccerapp.model.Team
import com.example.soccerapp.ui.theme.SoccerAppTheme
import com.example.soccerapp.viewmodel.TeamViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun TeamListScreen(viewModel: TeamViewModel, navController: NavController) {
    val teams = viewModel.teams.collectAsState().value
    SoccerAppTheme {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = { Text("Football Teams", color = MaterialTheme.colorScheme.onPrimary) },
                    Modifier.background(MaterialTheme.colorScheme.onBackground)
                )
            }
        ) { padding ->
            LazyColumn(modifier = Modifier.padding(padding)) {
                items(teams) { team ->
                    TeamCard(team = team) {
                        navController.navigate("teamDetail/${team.id}")
                    }
                }
            }
        }
    }
}

@Composable
fun TeamCard(team: Team, onClick: () -> Unit) {
    Card(
        modifier = Modifier
            .padding(8.dp)
            .fillMaxWidth()
            .clickable(onClick = onClick),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),
        colors = CardDefaults.cardColors()
    ) {
        Row(
            modifier = Modifier.padding(16.dp)
        ) {
            Image(
                painter = rememberImagePainter(team.logo),
                contentDescription = "Team Logo",
                modifier = Modifier.size(60.dp),
                contentScale = ContentScale.Fit
            )
            Spacer(modifier = Modifier.width(16.dp))
            Column(
                modifier = Modifier
                    .align(alignment = Alignment.CenterVertically)
                    .fillMaxWidth()
            ) {
                Text(
                    text = team.nombre,
                    style = MaterialTheme.typography.titleMedium,
                    color = MaterialTheme.colorScheme.onSurface
                )
            }
        }
    }
}


./app/src/main/java/com/example/soccerapp/database/TeamDao.kt

// TeamDao.kt
package com.example.soccerapp.database

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import com.example.soccerapp.model.Team
import kotlinx.coroutines.flow.Flow

@Dao
interface TeamDao {
    @Query("SELECT * FROM teams")
    fun getAllTeams(): Flow<List<Team>>

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertAll(teams: List<Team>)
}

./app/src/main/java/com/example/soccerapp/database/AppDatabase.kt

// AppDatabase.kt
package com.example.soccerapp.database

import androidx.room.Database
import androidx.room.RoomDatabase
import com.example.soccerapp.model.Team

@Database(entities = [Team::class], version = 2, exportSchema = false) // Incrementa la versión aquí
abstract class AppDatabase : RoomDatabase() {
    abstract fun teamDao(): TeamDao
}


./app/src/main/java/com/example/soccerapp/database/DatabaseModule.kt

package com.example.soccerapp.database

import android.content.Context
import androidx.room.Room
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
object DatabaseModule {

    @Singleton
    @Provides
    fun provideAppDatabase(@ApplicationContext context: Context): AppDatabase {
        return Room.databaseBuilder(
            context,
            AppDatabase::class.java,
            "soccerapp_database"
        )
            .fallbackToDestructiveMigration() // Añadir aquí para manejar cambios de esquema destruyendo la base de datos anterior
            .build()
    }

    @Provides
    fun provideTeamDao(database: AppDatabase): TeamDao {
        return database.teamDao()
    }
}


./app/src/main/java/com/example/soccerapp/repository/TeamRepository.kt

package com.example.soccerapp.repository

import android.util.Log
import com.example.soccerapp.model.Team
import com.example.soccerapp.model.TeamDetails
import com.example.soccerapp.network.ApiService
import com.example.soccerapp.database.TeamDao
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import javax.inject.Inject

class TeamRepository @Inject constructor(
    private val apiService: ApiService,
    private val teamDao: TeamDao
) {
    suspend fun getTeams(): Flow<List<Team>> = flow {
        val teams = apiService.getTeams()
        Log.d("Teams", "Teams fetched: ${teams}")
        teamDao.insertAll(teams)
        emit(teams)
    }

    // Adjust the function to emit TeamDetails instead of Team
    fun getTeamDetails(teamId: Int): Flow<TeamDetails> = flow {
        val teamDetails = apiService.getTeamDetails(teamId)
        emit(teamDetails)
    }

    suspend fun insertAll(teams: List<Team>) {
        try {
            teamDao.insertAll(teams)
        } catch (e: Exception) {
            Log.e("DatabaseError", "Error inserting teams: ${e.message}")
        }
    }
}


./app/src/main/java/com/example/soccerapp/di/NetworkModule.kt

package com.example.soccerapp.di

import com.example.soccerapp.network.ApiService
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
object NetworkModule {
    @Singleton
    @Provides
    fun provideRetrofit(): Retrofit {
        return Retrofit.Builder()
            .baseUrl("https://futboltalentodigital-13sjjpsmv-talento-projects.vercel.app/")
            .addConverterFactory(GsonConverterFactory.create())
            .build()
    }

    @Singleton
    @Provides
    fun provideApiService(retrofit: Retrofit): ApiService {
        return retrofit.create(ApiService::class.java)
    }
}


./app/src/main/java/com/example/soccerapp/network/ApiService.kt

package com.example.soccerapp.network

import com.example.soccerapp.model.Team
import com.example.soccerapp.model.TeamDetails
import retrofit2.http.GET
import retrofit2.http.Path

interface ApiService {
    @GET("equipos")
    suspend fun getTeams(): List<Team>

    @GET("equipos/{id}")
    suspend fun getTeamDetails(@Path("id") teamId: Int): TeamDetails
}


./app/src/main/java/com/example/soccerapp/model/TeamDetails.kt

// TeamDetails.kt
package com.example.soccerapp.model

data class TeamDetails(
    val id: Int,
    val name: String,
    val logo: String,
    val stadium: String,
    val city: String,
    val nationalTitles: Int,
    val foundationYear: Int,
    val internationalTitles: Int,
    val coach: String,
    val colors: List<String>,
    val ticketsAvailable: Boolean
)

./app/src/main/java/com/example/soccerapp/model/Team.kt

// Team.kt
package com.example.soccerapp.model

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "teams")
data class Team(
    @PrimaryKey val id: Int,
    val nombre: String,
    val logo: String,
) {

}

